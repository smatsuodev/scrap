/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './route/__root'
import { Route as AuthenticatedImport } from './route/_authenticated'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const AuthenticatedIndexLazyImport = createFileRoute('/_authenticated/')()
const AuthenticatedScrapsScrapIdLazyImport = createFileRoute(
  '/_authenticated/scraps/$scrapId',
)()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./route/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./route/login.lazy').then((d) => d.Route))

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexLazyRoute = AuthenticatedIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./route/_authenticated/index.lazy').then((d) => d.Route),
)

const AuthenticatedScrapsScrapIdLazyRoute =
  AuthenticatedScrapsScrapIdLazyImport.update({
    id: '/scraps/$scrapId',
    path: '/scraps/$scrapId',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./route/_authenticated/scraps/$scrapId.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/scraps/$scrapId': {
      id: '/_authenticated/scraps/$scrapId'
      path: '/scraps/$scrapId'
      fullPath: '/scraps/$scrapId'
      preLoaderRoute: typeof AuthenticatedScrapsScrapIdLazyImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedIndexLazyRoute: typeof AuthenticatedIndexLazyRoute
  AuthenticatedScrapsScrapIdLazyRoute: typeof AuthenticatedScrapsScrapIdLazyRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexLazyRoute: AuthenticatedIndexLazyRoute,
  AuthenticatedScrapsScrapIdLazyRoute: AuthenticatedScrapsScrapIdLazyRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/': typeof AuthenticatedIndexLazyRoute
  '/scraps/$scrapId': typeof AuthenticatedScrapsScrapIdLazyRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/': typeof AuthenticatedIndexLazyRoute
  '/scraps/$scrapId': typeof AuthenticatedScrapsScrapIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/_authenticated/': typeof AuthenticatedIndexLazyRoute
  '/_authenticated/scraps/$scrapId': typeof AuthenticatedScrapsScrapIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/register' | '/' | '/scraps/$scrapId'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/' | '/scraps/$scrapId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/register'
    | '/_authenticated/'
    | '/_authenticated/scraps/$scrapId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginLazyRoute: typeof LoginLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginLazyRoute: LoginLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/login",
        "/register"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/",
        "/_authenticated/scraps/$scrapId"
      ]
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/scraps/$scrapId": {
      "filePath": "_authenticated/scraps/$scrapId.lazy.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
